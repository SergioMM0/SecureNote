// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CucumberTesting.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TaggingNotesFeature : object, Xunit.IClassFixture<TaggingNotesFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Tagging Notes", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "NoteServiceTagMethod.feature"
#line hidden
        
        public TaggingNotesFeature(TaggingNotesFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Both title and content empty")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Both title and content empty")]
        public async System.Threading.Tasks.Task BothTitleAndContentEmpty()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Both title and content empty", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
    await testRunner.GivenAsync("a note with the title \"\" and the content \"\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table1.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table1.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table1.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 6
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table1, "And ");
#line hidden
#line 11
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            ""});
#line 12
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Both title and content whitespace")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Both title and content whitespace")]
        public async System.Threading.Tasks.Task BothTitleAndContentWhitespace()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Both title and content whitespace", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
    await testRunner.GivenAsync("a note with the title \" \" and the content \"  \"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table3.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table3.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table3.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 18
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table3, "And ");
#line hidden
#line 23
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            ""});
#line 24
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table4, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Both title and content null")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Both title and content null")]
        public async System.Threading.Tasks.Task BothTitleAndContentNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Both title and content null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 29
    await testRunner.GivenAsync("a note with the title null and the content null", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table5.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table5.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table5.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 30
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table5, "And ");
#line hidden
#line 35
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            ""});
#line 36
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table6, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Title empty, content with keyword")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Title empty, content with keyword")]
        public async System.Threading.Tasks.Task TitleEmptyContentWithKeyword()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Title empty, content with keyword", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 41
    await testRunner.GivenAsync("a note with the title \"\" and the content \"This is a task\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table7.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table7.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table7.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 42
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table7, "And ");
#line hidden
#line 47
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Task"});
#line 48
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Title null, content with keywords")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Title null, content with keywords")]
        public async System.Threading.Tasks.Task TitleNullContentWithKeywords()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Title null, content with keywords", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 53
    await testRunner.GivenAsync("a note with the title null and the content \"Important meeting\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table9.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table9.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table9.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 54
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table9, "And ");
#line hidden
#line 59
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "Urgent, Meeting"});
#line 60
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table10, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Content empty, title with keywords")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Content empty, title with keywords")]
        public async System.Threading.Tasks.Task ContentEmptyTitleWithKeywords()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Content empty, title with keywords", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 65
    await testRunner.GivenAsync("a note with the title \"Urgent task\" and the content \"\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table11 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table11.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table11.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table11.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 66
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table11, "And ");
#line hidden
#line 71
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table12 = new global::Reqnroll.Table(new string[] {
                            "Task, Urgent"});
#line 72
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table12, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Content null, title with keyword")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Content null, title with keyword")]
        public async System.Threading.Tasks.Task ContentNullTitleWithKeyword()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Content null, title with keyword", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 77
    await testRunner.GivenAsync("a note with the title \"Meeting notes\" and the content null", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table13 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table13.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table13.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table13.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 78
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table13, "And ");
#line hidden
#line 83
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table14 = new global::Reqnroll.Table(new string[] {
                            "Meeting"});
#line 84
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table14, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Both with same keywords")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Both with same keywords")]
        public async System.Threading.Tasks.Task BothWithSameKeywords()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Both with same keywords", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 89
    await testRunner.GivenAsync("a note with the title \"Urgent task\" and the content \"This is a task\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table15 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table15.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table15.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table15.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 90
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table15, "And ");
#line hidden
#line 95
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table16 = new global::Reqnroll.Table(new string[] {
                            "Task, Urgent"});
#line 96
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table16, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Both with different keywords for same tag")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Both with different keywords for same tag")]
        public async System.Threading.Tasks.Task BothWithDifferentKeywordsForSameTag()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Both with different keywords for same tag", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 101
    await testRunner.GivenAsync("a note with the title \"Meeting notes\" and the content \"Discuss and review\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table17 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table17.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table17.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table17.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 102
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table17, "And ");
#line hidden
#line 107
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table18 = new global::Reqnroll.Table(new string[] {
                            "Meeting"});
#line 108
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table18, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Both with different keywords for different tags")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Both with different keywords for different tags")]
        public async System.Threading.Tasks.Task BothWithDifferentKeywordsForDifferentTags()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Both with different keywords for different tags", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 113
    await testRunner.GivenAsync("a note with the title \"Urgent meeting\" and the content \"This is a task\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table19.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table19.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table19.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 114
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table19, "And ");
#line hidden
#line 119
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "Task, Urgent, Meeting"});
#line 120
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table20, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Content with keyword, title without")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Content with keyword, title without")]
        public async System.Threading.Tasks.Task ContentWithKeywordTitleWithout()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Content with keyword, title without", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 125
    await testRunner.GivenAsync("a note with the title \"Grocery Shopping\" and the content \"Buy milk, eggs, and bre" +
                        "ad\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table21.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table21.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table21.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 126
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table21, "And ");
#line hidden
#line 131
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "Task"});
#line 132
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table22, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Both with keywords for different tags")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Both with keywords for different tags")]
        public async System.Threading.Tasks.Task BothWithKeywordsForDifferentTags()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Both with keywords for different tags", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 137
    await testRunner.GivenAsync("a note with the title \"Team Meeting\" and the content \"Discuss progress and review" +
                        " tasks\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table23.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table23.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table23.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 138
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table23, "And ");
#line hidden
#line 143
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "Task, Meeting"});
#line 144
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table24, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="No keywords in title or content")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "No keywords in title or content")]
        public async System.Threading.Tasks.Task NoKeywordsInTitleOrContent()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("No keywords in title or content", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 149
    await testRunner.GivenAsync("a note with the title \"Vacation Photos\" and the content \"Pictures from my trip to" +
                        " Hawaii\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table25.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table25.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table25.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 150
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table25, "And ");
#line hidden
#line 155
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            ""});
#line 156
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table26, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Case-insensitive keyword matching")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Case-insensitive keyword matching")]
        public async System.Threading.Tasks.Task Case_InsensitiveKeywordMatching()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Case-insensitive keyword matching", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 161
    await testRunner.GivenAsync("a note with the title \"This is a TASK\" and the content \"Very IMPORTANT indeed\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table27.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table27.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table27.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 162
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table27, "And ");
#line hidden
#line 167
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "Task, Urgent"});
#line 168
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table28, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mixed case keywords")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Mixed case keywords")]
        public async System.Threading.Tasks.Task MixedCaseKeywords()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Mixed case keywords", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 172
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 173
    await testRunner.GivenAsync("a note with the title \"urgent TASK\" and the content \"ASAP work\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table29.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table29.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table29.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 174
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table29, "And ");
#line hidden
#line 179
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "Task, Urgent"});
#line 180
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table30, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Synonym keywords")]
        [Xunit.TraitAttribute("FeatureTitle", "Tagging Notes")]
        [Xunit.TraitAttribute("Description", "Synonym keywords")]
        public async System.Threading.Tasks.Task SynonymKeywords()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Synonym keywords", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 185
    await testRunner.GivenAsync("a note with the title \"Review meeting\" and the content \"Discuss project\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "Name",
                            "Keywords"});
                table31.AddRow(new string[] {
                            "Task",
                            "todo, task, work"});
                table31.AddRow(new string[] {
                            "Urgent",
                            "important, asap"});
                table31.AddRow(new string[] {
                            "Meeting",
                            "meeting, discuss, review"});
#line 186
    await testRunner.AndAsync("the following tags exist in the repository:", ((string)(null)), table31, "And ");
#line hidden
#line 191
    await testRunner.WhenAsync("the note is tagged", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "Meeting"});
#line 192
    await testRunner.ThenAsync("the note should have the following tags:", ((string)(null)), table32, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await TaggingNotesFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await TaggingNotesFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
